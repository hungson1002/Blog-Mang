<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Blog Lập Trình Mạng</title>
    <link>https://hungson1002.github.io/Blog-Mang/tags/javascript/</link>
    <description>Recent content in JavaScript on Blog Lập Trình Mạng</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hungson1002.github.io/Blog-Mang/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bảo mật Web: Ngăn chặn XSS &amp; CSRF với JavaScript</title>
      <link>https://hungson1002.github.io/Blog-Mang/blog/bao-mat-xss-csrf/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://hungson1002.github.io/Blog-Mang/blog/bao-mat-xss-csrf/</guid>
      <description>&lt;h2 id=&#34;giới-thiệu&#34;&gt;Giới thiệu&lt;/h2&gt;
&lt;p&gt;Trong thời đại web ngày nay, &lt;strong&gt;bảo mật ứng dụng&lt;/strong&gt; là yếu tố sống còn. Hai trong số các lỗ hổng phổ biến nhất mà lập trình viên hay gặp phải là &lt;strong&gt;XSS (Cross-Site Scripting)&lt;/strong&gt; và &lt;strong&gt;CSRF (Cross-Site Request Forgery)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nếu không được ngăn chặn, kẻ tấn công có thể:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chèn mã độc vào trình duyệt người dùng (XSS).&lt;/li&gt;
&lt;li&gt;Lợi dụng người dùng đã đăng nhập để thực hiện hành động trái phép (CSRF).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trong bài viết này, chúng ta sẽ:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hiểu rõ Fetch API &amp; vấn đề CORS trong JavaScript</title>
      <link>https://hungson1002.github.io/Blog-Mang/blog/fetch-api-cors-javascript/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://hungson1002.github.io/Blog-Mang/blog/fetch-api-cors-javascript/</guid>
      <description>&lt;h2 id=&#34;giới-thiệu&#34;&gt;Giới thiệu&lt;/h2&gt;
&lt;p&gt;Trong lập trình web hiện đại, &lt;strong&gt;JavaScript&lt;/strong&gt; đóng vai trò trung tâm trong việc giao tiếp giữa frontend và backend.&lt;br&gt;
Một trong những công cụ mạnh mẽ nhất để gọi API từ trình duyệt là &lt;strong&gt;Fetch API&lt;/strong&gt;. Nó thay thế &lt;code&gt;XMLHttpRequest&lt;/code&gt; cũ kỹ, mang đến cú pháp gọn gàng hơn dựa trên &lt;strong&gt;Promise&lt;/strong&gt; và hỗ trợ tốt với &lt;strong&gt;async/await&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tuy nhiên, khi gọi API từ domain khác, bạn thường gặp lỗi khó chịu:&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebSocket với Node.js: Giao tiếp real-time đơn giản</title>
      <link>https://hungson1002.github.io/Blog-Mang/blog/websocket-nodejs-realtime/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://hungson1002.github.io/Blog-Mang/blog/websocket-nodejs-realtime/</guid>
      <description>&lt;h2 id=&#34;giới-thiệu&#34;&gt;Giới thiệu&lt;/h2&gt;
&lt;p&gt;Trong các ứng dụng hiện đại như &lt;strong&gt;chat online&lt;/strong&gt;, &lt;strong&gt;game multiplayer&lt;/strong&gt;, hay &lt;strong&gt;ứng dụng theo dõi chứng khoán&lt;/strong&gt;, yêu cầu quan trọng là &lt;strong&gt;dữ liệu phải được cập nhật theo thời gian thực (real-time)&lt;/strong&gt;.&lt;br&gt;
HTTP truyền thống hoạt động theo cơ chế &lt;strong&gt;request – response&lt;/strong&gt;: client gửi yêu cầu, server trả về dữ liệu. Điều này không phù hợp cho các ứng dụng real-time, nơi dữ liệu liên tục thay đổi.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
